{"version":3,"file":"index.js","names":["c","_c","ShimmerEffect","useConfig","React","lazy","Suspense","useEffect","useState","defaultEditorLexicalConfig","loadClientFeatures","sanitizeClientEditorConfig","RichTextEditor","then","module","default","RichText","RichTextField","props","$","admin","t0","clientFeatures","featureClientImportMap","t1","featureClientSchemaMap","field","lexicalEditorConfig","t2","schemaPath","t3","undefined","t4","config","finalSanitizedEditorConfig","setFinalSanitizedEditorConfig","t5","t6","featureProvidersLocal","clientFeature","Object","values","clientFeatureProvider","push","clientFeatureProps","resolvedClientFeatures","name","unSanitizedEditorConfig","features","lexical","t7","_jsx","fallback","height","editorConfig"],"sources":["../../src/field/index.tsx"],"sourcesContent":["'use client'\n\nimport type { RichTextFieldClient } from 'payload'\n\nimport { ShimmerEffect, useConfig } from '@payloadcms/ui'\nimport React, { lazy, Suspense, useEffect, useState } from 'react'\n\nimport type { FeatureProviderClient } from '../features/typesClient.js'\nimport type { SanitizedClientEditorConfig } from '../lexical/config/types.js'\nimport type { LexicalRichTextFieldProps } from '../types.js'\n\nimport { defaultEditorLexicalConfig } from '../lexical/config/client/default.js'\nimport { loadClientFeatures } from '../lexical/config/client/loader.js'\nimport { sanitizeClientEditorConfig } from '../lexical/config/client/sanitize.js'\n\nconst RichTextEditor = lazy(() =>\n  import('./Field.js').then((module) => ({ default: module.RichText })),\n)\n\nexport const RichTextField: React.FC<LexicalRichTextFieldProps> = (props) => {\n  const {\n    admin = {},\n    clientFeatures,\n    featureClientImportMap = {},\n    featureClientSchemaMap,\n    field,\n    lexicalEditorConfig = defaultEditorLexicalConfig,\n    schemaPath,\n  } = props\n\n  const { config } = useConfig()\n\n  const [finalSanitizedEditorConfig, setFinalSanitizedEditorConfig] =\n    useState<null | SanitizedClientEditorConfig>(null)\n\n  useEffect(() => {\n    if (finalSanitizedEditorConfig) {\n      return\n    }\n\n    const featureProvidersLocal: FeatureProviderClient<any, any>[] = []\n    for (const clientFeature of Object.values(clientFeatures)) {\n      if (!clientFeature.clientFeatureProvider) {\n        continue\n      }\n      featureProvidersLocal.push(\n        clientFeature.clientFeatureProvider(clientFeature.clientFeatureProps),\n      ) // Execute the clientFeatureProvider function here, as the server cannot execute functions imported from use client files\n    }\n\n    const resolvedClientFeatures = loadClientFeatures({\n      config,\n      featureClientImportMap,\n      featureClientSchemaMap,\n      field: field as RichTextFieldClient,\n      schemaPath: schemaPath ?? field.name,\n      unSanitizedEditorConfig: {\n        features: featureProvidersLocal,\n        lexical: lexicalEditorConfig,\n      },\n    })\n\n    setFinalSanitizedEditorConfig(\n      sanitizeClientEditorConfig(resolvedClientFeatures, lexicalEditorConfig, admin),\n    )\n  }, [\n    admin,\n    clientFeatures,\n    config,\n    featureClientImportMap,\n    featureClientSchemaMap,\n    field,\n    finalSanitizedEditorConfig,\n    lexicalEditorConfig,\n    schemaPath,\n  ]) // TODO: Optimize this and use useMemo for this in the future. This might break sub-richtext-blocks from the blocks feature. Need to investigate\n\n  return (\n    <Suspense fallback={<ShimmerEffect height=\"35vh\" />}>\n      {finalSanitizedEditorConfig && (\n        <RichTextEditor {...props} editorConfig={finalSanitizedEditorConfig} />\n      )}\n    </Suspense>\n  )\n}\n"],"mappings":"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","ignoreList":[]}