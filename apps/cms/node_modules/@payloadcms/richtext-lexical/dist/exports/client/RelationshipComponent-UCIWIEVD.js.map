{
  "version": 3,
  "sources": ["../../../src/features/relationship/client/components/RelationshipComponent.tsx"],
  "sourcesContent": ["'use client'\nimport type { ElementFormatType } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\nimport { getTranslation } from '@payloadcms/translations'\nimport { Button, useConfig, usePayloadAPI, useTranslation } from '@payloadcms/ui'\nimport { $getNodeByKey } from 'lexical'\nimport React, { useCallback, useReducer, useRef, useState } from 'react'\n\nimport type { RelationshipData } from '../../server/nodes/RelationshipNode.js'\n\nimport { useLexicalDocumentDrawer } from '../../../../utilities/fieldsDrawer/useLexicalDocumentDrawer.js'\nimport './index.scss'\nimport { INSERT_RELATIONSHIP_WITH_DRAWER_COMMAND } from '../drawer/commands.js'\n\nconst initialParams = {\n  depth: 0,\n}\n\ntype Props = {\n  className: string\n  data: RelationshipData\n  format?: ElementFormatType\n  nodeKey?: string\n}\n\nexport const RelationshipComponent: React.FC<Props> = (props) => {\n  const {\n    className: baseClass,\n    data: { relationTo, value },\n    nodeKey,\n  } = props\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Relationship value should be a string or number. The Lexical Relationship component should not receive the populated value object.',\n    )\n  }\n\n  const relationshipElemRef = useRef<HTMLDivElement | null>(null)\n\n  const [editor] = useLexicalComposerContext()\n  const isEditable = useLexicalEditable()\n  const {\n    config: {\n      routes: { api },\n      serverURL,\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const [relatedCollection] = useState(() => getEntityConfig({ collectionSlug: relationTo }))\n\n  const { i18n, t } = useTranslation()\n  const [cacheBust, dispatchCacheBust] = useReducer((state) => state + 1, 0)\n  const [{ data }, { setParams }] = usePayloadAPI(\n    `${serverURL}${api}/${relatedCollection.slug}/${value}`,\n    { initialParams },\n  )\n\n  const { closeDocumentDrawer, DocumentDrawer, DocumentDrawerToggler } = useLexicalDocumentDrawer({\n    id: value,\n    collectionSlug: relatedCollection.slug,\n  })\n\n  const removeRelationship = useCallback(() => {\n    editor.update(() => {\n      $getNodeByKey(nodeKey!)?.remove()\n    })\n  }, [editor, nodeKey])\n\n  const updateRelationship = React.useCallback(() => {\n    setParams({\n      ...initialParams,\n      cacheBust, // do this to get the usePayloadAPI to re-fetch the data even though the URL string hasn't changed\n    })\n\n    closeDocumentDrawer()\n    dispatchCacheBust()\n  }, [cacheBust, setParams, closeDocumentDrawer])\n\n  return (\n    <div className={`${baseClass}__contents`} contentEditable={false} ref={relationshipElemRef}>\n      <div className={`${baseClass}__wrap`}>\n        <p className={`${baseClass}__label`}>\n          {t('fields:labelRelationship', {\n            label: relatedCollection.labels?.singular\n              ? getTranslation(relatedCollection.labels?.singular, i18n)\n              : relatedCollection.slug,\n          })}\n        </p>\n        <DocumentDrawerToggler className={`${baseClass}__doc-drawer-toggler`}>\n          <p className={`${baseClass}__title`}>\n            {data ? data[relatedCollection?.admin?.useAsTitle || 'id'] : value}\n          </p>\n        </DocumentDrawerToggler>\n      </div>\n      {isEditable && (\n        <div className={`${baseClass}__actions`}>\n          <Button\n            buttonStyle=\"icon-label\"\n            className={`${baseClass}__swapButton`}\n            disabled={!isEditable}\n            el=\"button\"\n            icon=\"swap\"\n            onClick={() => {\n              if (nodeKey) {\n                editor.dispatchCommand(INSERT_RELATIONSHIP_WITH_DRAWER_COMMAND, {\n                  replace: { nodeKey },\n                })\n              }\n            }}\n            round\n            tooltip={t('fields:swapRelationship')}\n          />\n          <Button\n            buttonStyle=\"icon-label\"\n            className={`${baseClass}__removeButton`}\n            disabled={!isEditable}\n            icon=\"x\"\n            onClick={(e) => {\n              e.preventDefault()\n              removeRelationship()\n            }}\n            round\n            tooltip={t('fields:removeRelationship')}\n          />\n        </div>\n      )}\n\n      {!!value && <DocumentDrawer onSave={updateRelationship} />}\n    </div>\n  )\n}\n"],
  "mappings": "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",
  "names": ["useLexicalComposerContext", "useLexicalEditable", "getTranslation", "Button", "useConfig", "usePayloadAPI", "useTranslation", "$getNodeByKey", "React", "useCallback", "useReducer", "useRef", "useState", "initialParams", "depth", "RelationshipComponent", "props", "className", "baseClass", "data", "relationTo", "value", "nodeKey", "Error", "relationshipElemRef", "useRef", "editor", "useLexicalComposerContext", "isEditable", "useLexicalEditable", "config", "routes", "api", "serverURL", "getEntityConfig", "useConfig", "relatedCollection", "useState", "collectionSlug", "i18n", "t", "useTranslation", "cacheBust", "dispatchCacheBust", "useReducer", "state", "setParams", "usePayloadAPI", "slug", "closeDocumentDrawer", "DocumentDrawer", "DocumentDrawerToggler", "useLexicalDocumentDrawer", "id", "removeRelationship", "useCallback", "update", "$getNodeByKey", "remove", "updateRelationship", "React", "_jsxs", "contentEditable", "ref", "_jsx", "label", "labels", "singular", "getTranslation", "admin", "useAsTitle", "Button", "buttonStyle", "disabled", "el", "icon", "onClick", "dispatchCommand", "INSERT_RELATIONSHIP_WITH_DRAWER_COMMAND", "replace", "round", "tooltip", "e", "preventDefault", "onSave"]
}
