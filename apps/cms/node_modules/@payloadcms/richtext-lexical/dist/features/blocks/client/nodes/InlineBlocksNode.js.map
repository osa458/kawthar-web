{"version":3,"file":"InlineBlocksNode.js","names":["ObjectID","$applyNodeReplacement","React","ServerInlineBlockNode","InlineBlockComponent","lazy","then","module","default","InlineBlockNode","clone","node","getType","importJSON","serializedNode","$createInlineBlockNode","fields","decorate","_editor","config","_jsx","cacheBuster","getCacheBuster","className","theme","inlineBlock","formData","getFields","nodeKey","getKey","exportJSON","id","toHexString","$isInlineBlockNode"],"sources":["../../../../../src/features/blocks/client/nodes/InlineBlocksNode.tsx"],"sourcesContent":["'use client'\nimport ObjectID from 'bson-objectid'\nimport {\n  $applyNodeReplacement,\n  type EditorConfig,\n  type LexicalEditor,\n  type LexicalNode,\n} from 'lexical'\nimport React, { type JSX } from 'react'\n\nimport type {\n  InlineBlockFields,\n  SerializedInlineBlockNode,\n} from '../../server/nodes/InlineBlocksNode.js'\n\nimport { ServerInlineBlockNode } from '../../server/nodes/InlineBlocksNode.js'\n\nconst InlineBlockComponent = React.lazy(() =>\n  import('../componentInline/index.js').then((module) => ({\n    default: module.InlineBlockComponent,\n  })),\n)\n\nexport class InlineBlockNode extends ServerInlineBlockNode {\n  static override clone(node: ServerInlineBlockNode): ServerInlineBlockNode {\n    return super.clone(node)\n  }\n\n  static override getType(): string {\n    return super.getType()\n  }\n\n  static override importJSON(serializedNode: SerializedInlineBlockNode): InlineBlockNode {\n    const node = $createInlineBlockNode(serializedNode.fields)\n    return node\n  }\n\n  override decorate(_editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    return (\n      <InlineBlockComponent\n        cacheBuster={this.getCacheBuster()}\n        className={config.theme.inlineBlock ?? 'LexicalEditorTheme__inlineBlock'}\n        formData={this.getFields()}\n        nodeKey={this.getKey()}\n      />\n    )\n  }\n\n  override exportJSON(): SerializedInlineBlockNode {\n    return super.exportJSON()\n  }\n}\n\nexport function $createInlineBlockNode(fields: Exclude<InlineBlockFields, 'id'>): InlineBlockNode {\n  return $applyNodeReplacement(\n    new InlineBlockNode({\n      fields: {\n        ...fields,\n        id: fields?.id || new ObjectID.default().toHexString(),\n      },\n    }),\n  )\n}\n\nexport function $isInlineBlockNode(\n  node: InlineBlockNode | LexicalNode | null | undefined,\n): node is InlineBlockNode {\n  return node instanceof InlineBlockNode\n}\n"],"mappings":"AAAA;;;AACA,OAAOA,QAAA,MAAc;AACrB,SACEC,qBAAqB,QAIhB;AACP,OAAOC,KAAA,MAAyB;AAOhC,SAASC,qBAAqB,QAAQ;AAEtC,MAAMC,oBAAA,gBAAuBF,KAAA,CAAMG,IAAI,CAAC,MACtC,MAAM,CAAC,+BAA+BC,IAAI,CAAEC,MAAA,KAAY;EACtDC,OAAA,EAASD,MAAA,CAAOH;AAClB;AAGF,OAAO,MAAMK,eAAA,SAAwBN,qBAAA;EACnC,OAAgBO,MAAMC,IAA2B,EAAyB;IACxE,OAAO,KAAK,CAACD,KAAA,CAAMC,IAAA;EACrB;EAEA,OAAgBC,QAAA,EAAkB;IAChC,OAAO,KAAK,CAACA,OAAA;EACf;EAEA,OAAgBC,WAAWC,cAAyC,EAAmB;IACrF,MAAMH,IAAA,GAAOI,sBAAA,CAAuBD,cAAA,CAAeE,MAAM;IACzD,OAAOL,IAAA;EACT;EAESM,SAASC,OAAsB,EAAEC,MAAoB,EAAe;IAC3E,oBACEC,IAAA,CAAChB,oBAAA;MACCiB,WAAA,EAAa,IAAI,CAACC,cAAc;MAChCC,SAAA,EAAWJ,MAAA,CAAOK,KAAK,CAACC,WAAW,IAAI;MACvCC,QAAA,EAAU,IAAI,CAACC,SAAS;MACxBC,OAAA,EAAS,IAAI,CAACC,MAAM;;EAG1B;EAESC,WAAA,EAAwC;IAC/C,OAAO,KAAK,CAACA,UAAA;EACf;AACF;AAEA,OAAO,SAASf,uBAAuBC,MAAwC;EAC7E,OAAOf,qBAAA,CACL,IAAIQ,eAAA,CAAgB;IAClBO,MAAA,EAAQ;MACN,GAAGA,MAAM;MACTe,EAAA,EAAIf,MAAA,EAAQe,EAAA,IAAM,IAAI/B,QAAA,CAASQ,OAAO,GAAGwB,WAAW;IACtD;EACF;AAEJ;AAEA,OAAO,SAASC,mBACdtB,IAAsD;EAEtD,OAAOA,IAAA,YAAgBF,eAAA;AACzB","ignoreList":[]}