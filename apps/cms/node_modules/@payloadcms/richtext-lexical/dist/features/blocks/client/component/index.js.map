{"version":3,"file":"index.js","names":["useLexicalComposerContext","useLexicalEditable","getTranslation","Button","Collapsible","Drawer","EditDepthProvider","ErrorPill","Form","formatDrawerSlug","FormSubmit","Pill","RenderFields","SectionTitle","useConfig","useDocumentForm","useDocumentInfo","useEditDepth","useFormSubmitted","useServerFunctions","useTranslation","abortAndIgnore","$getNodeByKey","deepCopyObjectSimpleWithoutReactComponents","reduceFieldsToValues","React","useCallback","useEffect","useMemo","useRef","v4","uuid","useEditorConfigContext","useLexicalDrawer","$isBlockNode","BlockContent","removeEmptyArrayValues","BlockComponent","props","cacheBuster","className","baseClass","formData","nodeKey","submitted","id","collectionSlug","globalSlug","fieldProps","featureClientSchemaMap","field","parentLexicalRichTextField","initialLexicalFormState","schemaPath","uuidFromContext","fields","parentDocumentFields","onChangeAbortControllerRef","AbortController","editDepth","errorCount","setErrorCount","useState","config","drawerSlug","slug","depth","toggleDrawer","getDocPreferences","setDocFieldPreferences","editor","isEditable","blockType","getFormState","schemaFieldsPath","initialState","setInitialState","cachedFormState","formState","Object","fromEntries","entries","map","fieldName","fieldState","initialValue","value","hasMounted","prevCacheBuster","current","CustomLabel","setCustomLabel","customComponents","BlockLabel","undefined","CustomBlock","setCustomBlock","Block","abortController","awaitInitialState","state","data","docPermissions","docPreferences","documentFormState","initialBlockData","operation","readOnly","renderAllFields","signal","blockName","passesCondition","valid","newFormStateData","update","node","newData","setFields","_components","isCollapsed","setIsCollapsed","collapsed","componentMapRenderedBlockPath","clientSchemaMap","blocksField","clientBlock","blockReferences","blocksMap","blocks","i18n","t","onChange","prevFormState","submit","controller","newFormState","initialBlockFormState","setTimeout","rowErrorCount","formField","values","removeBlock","remove","blockDisplayName","labels","singular","onCollapsedChange","changedCollapsed","then","currentDocPreferences","currentFieldPreferences","name","collapsedArray","newCollapsed","length","includes","push","splice","indexOf","hello","EditButton","_jsx","buttonStyle","disabled","el","icon","onClick","e","preventDefault","stopPropagation","onMouseDown","round","size","tooltip","label","RemoveButton","BlockCollapsible","Actions","children","collapsibleProps","disableBlockName","editButton","fieldHasErrors","Label","CustomPill","removeButton","filter","Boolean","join","collapsibleStyle","header","_jsxs","pillStyle","admin","path","count","withMessage","_Fragment","onToggle","incomingCollapsedState","blockID","BlockDrawer","title","forceRender","parentIndexPath","parentPath","parentSchemaPath","permissions","programmaticSubmit","beforeSubmit","onSubmit","formSchema"],"sources":["../../../../../src/features/blocks/client/component/index.tsx"],"sourcesContent":["'use client'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Button,\n  Collapsible,\n  Drawer,\n  EditDepthProvider,\n  ErrorPill,\n  Form,\n  formatDrawerSlug,\n  FormSubmit,\n  Pill,\n  RenderFields,\n  SectionTitle,\n  useConfig,\n  useDocumentForm,\n  useDocumentInfo,\n  useEditDepth,\n  useFormSubmitted,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { abortAndIgnore } from '@payloadcms/ui/shared'\nimport { $getNodeByKey } from 'lexical'\nimport {\n  type BlocksFieldClient,\n  type ClientBlock,\n  type CollapsedPreferences,\n  type FormState,\n} from 'payload'\nimport { deepCopyObjectSimpleWithoutReactComponents, reduceFieldsToValues } from 'payload/shared'\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nimport type { BlockFields } from '../../server/nodes/BlocksNode.js'\n\nimport { useEditorConfigContext } from '../../../../lexical/config/client/EditorConfigProvider.js'\nimport './index.scss'\nimport { useLexicalDrawer } from '../../../../utilities/fieldsDrawer/useLexicalDrawer.js'\nimport { $isBlockNode } from '../nodes/BlocksNode.js'\nimport { type BlockCollapsibleWithErrorProps, BlockContent } from './BlockContent.js'\nimport { removeEmptyArrayValues } from './removeEmptyArrayValues.js'\n\ntype Props = {\n  /**\n   * Can be modified by the node in order to trigger the re-fetch of the initial state based on the\n   * formData. This is useful when node.setFields() is explicitly called from outside of the form - in\n   * this case, the new field state is likely not reflected in the form state, so we need to re-fetch\n   */\n  readonly cacheBuster: number\n  readonly className: string\n  readonly formData: BlockFields\n  readonly nodeKey: string\n}\n\nexport const BlockComponent: React.FC<Props> = (props) => {\n  const { cacheBuster, className: baseClass, formData, nodeKey } = props\n  const submitted = useFormSubmitted()\n  const { id, collectionSlug, globalSlug } = useDocumentInfo()\n  const {\n    fieldProps: {\n      featureClientSchemaMap,\n      field: parentLexicalRichTextField,\n      initialLexicalFormState,\n      schemaPath,\n    },\n    uuid: uuidFromContext,\n  } = useEditorConfigContext()\n\n  const { fields: parentDocumentFields } = useDocumentForm()\n  const onChangeAbortControllerRef = useRef(new AbortController())\n  const editDepth = useEditDepth()\n  const [errorCount, setErrorCount] = React.useState(0)\n\n  const { config } = useConfig()\n\n  const drawerSlug = formatDrawerSlug({\n    slug: `lexical-blocks-create-${uuidFromContext}-${formData.id}`,\n    depth: editDepth,\n  })\n  const { toggleDrawer } = useLexicalDrawer(drawerSlug)\n\n  // Used for saving collapsed to preferences (and gettin' it from there again)\n  // Remember, these preferences are scoped to the whole document, not just this form. This\n  // is important to consider for the data path used in setDocFieldPreferences\n  const { getDocPreferences, setDocFieldPreferences } = useDocumentInfo()\n  const [editor] = useLexicalComposerContext()\n  const isEditable = useLexicalEditable()\n\n  const blockType = formData.blockType\n\n  const { getFormState } = useServerFunctions()\n  const schemaFieldsPath = `${schemaPath}.lexical_internal_feature.blocks.lexical_blocks.${blockType}.fields`\n\n  const [initialState, setInitialState] = React.useState<false | FormState | undefined>(() => {\n    // Initial form state that was calculated server-side. May have stale values\n    const cachedFormState = initialLexicalFormState?.[formData.id]?.formState\n    if (!cachedFormState) {\n      return false\n    }\n\n    // Merge current formData values into the cached form state\n    // This ensures that when the component remounts (e.g., due to view changes), we don't lose user edits\n    return Object.fromEntries(\n      Object.entries(cachedFormState).map(([fieldName, fieldState]) => [\n        fieldName,\n        fieldName in formData\n          ? {\n              ...fieldState,\n              initialValue: formData[fieldName],\n              value: formData[fieldName],\n            }\n          : fieldState,\n      ]),\n    )\n  })\n\n  const hasMounted = useRef(false)\n  const prevCacheBuster = useRef(cacheBuster)\n  useEffect(() => {\n    if (hasMounted.current) {\n      if (prevCacheBuster.current !== cacheBuster) {\n        setInitialState(false)\n      }\n      prevCacheBuster.current = cacheBuster\n    } else {\n      hasMounted.current = true\n    }\n  }, [cacheBuster])\n\n  const [CustomLabel, setCustomLabel] = React.useState<React.ReactNode | undefined>(\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    initialState?.['_components']?.customComponents?.BlockLabel ?? undefined,\n  )\n\n  const [CustomBlock, setCustomBlock] = React.useState<React.ReactNode | undefined>(\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    initialState?.['_components']?.customComponents?.Block ?? undefined,\n  )\n\n  // Initial state for newly created blocks\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    const awaitInitialState = async () => {\n      /*\n       * This will only run if a new block is created. For all existing blocks that are loaded when the document is loaded, or when the form is saved,\n       * this is not run, as the lexical field RSC will fetch the state server-side and pass it to the client. That way, we avoid unnecessary client-side\n       * requests. Though for newly created blocks, we need to fetch the state client-side, as the server doesn't know about the block yet.\n       */\n      const { state } = await getFormState({\n        id,\n        collectionSlug,\n        data: formData,\n        docPermissions: { fields: true },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        globalSlug,\n        initialBlockData: formData,\n        operation: 'update',\n        readOnly: !isEditable,\n        renderAllFields: true,\n        schemaPath: schemaFieldsPath,\n        signal: abortController.signal,\n      })\n\n      if (state) {\n        state.blockName = {\n          initialValue: formData.blockName,\n          passesCondition: true,\n          valid: true,\n          value: formData.blockName,\n        }\n\n        const newFormStateData: BlockFields = reduceFieldsToValues(\n          deepCopyObjectSimpleWithoutReactComponents(state),\n          true,\n        ) as BlockFields\n\n        // Things like default values may come back from the server => update the node with the new data\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node && $isBlockNode(node)) {\n            const newData = newFormStateData\n            newData.blockType = blockType\n\n            node.setFields(newData, true)\n          }\n        })\n\n        setInitialState(state)\n        setCustomLabel(state._components?.customComponents?.BlockLabel ?? undefined)\n        setCustomBlock(state._components?.customComponents?.Block ?? undefined)\n      }\n    }\n\n    if (formData && !initialState) {\n      void awaitInitialState()\n    }\n\n    return () => {\n      abortAndIgnore(abortController)\n    }\n  }, [\n    getFormState,\n    schemaFieldsPath,\n    isEditable,\n    id,\n    formData,\n    editor,\n    nodeKey,\n    initialState,\n    collectionSlug,\n    globalSlug,\n    getDocPreferences,\n    parentDocumentFields,\n    blockType,\n  ])\n\n  const [isCollapsed, setIsCollapsed] = React.useState<boolean>(\n    initialLexicalFormState?.[formData.id]?.collapsed ?? false,\n  )\n\n  const componentMapRenderedBlockPath = `${schemaPath}.lexical_internal_feature.blocks.lexical_blocks.${blockType}`\n\n  const clientSchemaMap = featureClientSchemaMap['blocks']\n\n  const blocksField: BlocksFieldClient | undefined = clientSchemaMap?.[\n    componentMapRenderedBlockPath\n  ]?.[0] as BlocksFieldClient\n\n  const clientBlock: ClientBlock | undefined = blocksField.blockReferences\n    ? typeof blocksField?.blockReferences?.[0] === 'string'\n      ? config.blocksMap[blocksField?.blockReferences?.[0]]\n      : blocksField?.blockReferences?.[0]\n    : blocksField?.blocks?.[0]\n\n  const { i18n, t } = useTranslation<object, string>()\n\n  const onChange = useCallback(\n    async ({ formState: prevFormState, submit }: { formState: FormState; submit?: boolean }) => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n\n      const controller = new AbortController()\n      onChangeAbortControllerRef.current = controller\n\n      const { state: newFormState } = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        formState: prevFormState,\n        globalSlug,\n        initialBlockFormState: prevFormState,\n        operation: 'update',\n        readOnly: !isEditable,\n        renderAllFields: submit ? true : false,\n        schemaPath: schemaFieldsPath,\n        signal: controller.signal,\n      })\n\n      if (!newFormState) {\n        return prevFormState\n      }\n\n      if (prevFormState.blockName) {\n        newFormState.blockName = prevFormState.blockName\n      }\n\n      const newFormStateData: BlockFields = reduceFieldsToValues(\n        removeEmptyArrayValues({\n          fields: deepCopyObjectSimpleWithoutReactComponents(newFormState),\n        }),\n        true,\n      ) as BlockFields\n\n      setTimeout(() => {\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node && $isBlockNode(node)) {\n            const newData = newFormStateData\n            newData.blockType = blockType\n            node.setFields(newData, true)\n          }\n        })\n      }, 0)\n\n      if (submit) {\n        setCustomLabel(newFormState._components?.customComponents?.BlockLabel ?? undefined)\n        setCustomBlock(newFormState._components?.customComponents?.Block ?? undefined)\n\n        let rowErrorCount = 0\n        for (const formField of Object.values(newFormState)) {\n          if (formField?.valid === false) {\n            rowErrorCount++\n          }\n        }\n        setErrorCount(rowErrorCount)\n      }\n\n      return newFormState\n    },\n\n    [\n      getFormState,\n      id,\n      collectionSlug,\n      getDocPreferences,\n      globalSlug,\n      schemaFieldsPath,\n      blockType,\n      parentDocumentFields,\n      isEditable,\n      editor,\n      nodeKey,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n    }\n  }, [])\n\n  const removeBlock = useCallback(() => {\n    editor.update(() => {\n      $getNodeByKey(nodeKey)?.remove()\n    })\n  }, [editor, nodeKey])\n\n  const blockDisplayName = clientBlock?.labels?.singular\n    ? getTranslation(clientBlock.labels.singular, i18n)\n    : clientBlock?.slug\n\n  const onCollapsedChange = useCallback(\n    (changedCollapsed: boolean) => {\n      void getDocPreferences().then((currentDocPreferences) => {\n        const currentFieldPreferences =\n          currentDocPreferences?.fields?.[parentLexicalRichTextField.name]\n\n        const collapsedArray = currentFieldPreferences?.collapsed\n\n        const newCollapsed: CollapsedPreferences =\n          collapsedArray && collapsedArray?.length ? collapsedArray : []\n\n        if (changedCollapsed) {\n          if (!newCollapsed.includes(formData.id)) {\n            newCollapsed.push(formData.id)\n          }\n        } else {\n          if (newCollapsed.includes(formData.id)) {\n            newCollapsed.splice(newCollapsed.indexOf(formData.id), 1)\n          }\n        }\n\n        setDocFieldPreferences(parentLexicalRichTextField.name, {\n          collapsed: newCollapsed,\n          hello: 'hi',\n        })\n      })\n    },\n    [getDocPreferences, parentLexicalRichTextField.name, setDocFieldPreferences, formData.id],\n  )\n\n  const EditButton = useMemo(\n    () => () => (\n      <Button\n        buttonStyle=\"icon-label\"\n        className={`${baseClass}__editButton`}\n        disabled={!isEditable}\n        el=\"button\"\n        icon=\"edit\"\n        onClick={(e) => {\n          e.preventDefault()\n          e.stopPropagation()\n          toggleDrawer()\n          return false\n        }}\n        onMouseDown={(e) => {\n          // Needed to preserve lexical selection for toggleDrawer lexical selection restore.\n          // I believe this is needed due to this button (usually) being inside of a collapsible.\n          e.preventDefault()\n        }}\n        round\n        size=\"small\"\n        tooltip={t('lexical:blocks:inlineBlocks:edit', { label: blockDisplayName })}\n      />\n    ),\n    [baseClass, isEditable, t, blockDisplayName, toggleDrawer],\n  )\n\n  const RemoveButton = useMemo(\n    () => () => (\n      <Button\n        buttonStyle=\"icon-label\"\n        className={`${baseClass}__removeButton`}\n        disabled={!isEditable}\n        icon=\"x\"\n        onClick={(e) => {\n          e.preventDefault()\n          removeBlock()\n        }}\n        round\n        tooltip=\"Remove Block\"\n      />\n    ),\n    [baseClass, isEditable, removeBlock],\n  )\n\n  const BlockCollapsible = useMemo(\n    () =>\n      ({\n        Actions,\n        children,\n        className,\n        collapsibleProps,\n        disableBlockName,\n        editButton,\n        errorCount,\n        fieldHasErrors,\n        Label,\n        Pill: CustomPill,\n        removeButton,\n      }: BlockCollapsibleWithErrorProps) => {\n        return (\n          <div className={`${baseClass}__container ${baseClass}-${blockType}`}>\n            <Collapsible\n              className={[\n                `${baseClass}__row`,\n                fieldHasErrors ? `${baseClass}__row--has-errors` : `${baseClass}__row--no-errors`,\n                className,\n              ]\n                .filter(Boolean)\n                .join(' ')}\n              collapsibleStyle={fieldHasErrors ? 'error' : 'default'}\n              header={\n                <div className={`${baseClass}__block-header`}>\n                  {typeof Label !== 'undefined' ? (\n                    Label\n                  ) : typeof CustomLabel !== 'undefined' ? (\n                    CustomLabel\n                  ) : (\n                    <div className={`${baseClass}__block-label`}>\n                      {typeof CustomPill !== 'undefined' ? (\n                        CustomPill\n                      ) : (\n                        <Pill\n                          className={`${baseClass}__block-pill ${baseClass}__block-pill-${blockType}`}\n                          pillStyle=\"white\"\n                          size=\"small\"\n                        >\n                          {blockDisplayName ?? blockType}\n                        </Pill>\n                      )}\n                      {!disableBlockName && !clientBlock?.admin?.disableBlockName && (\n                        <SectionTitle path=\"blockName\" readOnly={!isEditable} />\n                      )}\n\n                      {fieldHasErrors && (\n                        <ErrorPill count={errorCount ?? 0} i18n={i18n} withMessage />\n                      )}\n                    </div>\n                  )}\n\n                  <div className={`${baseClass}__block-actions`}>\n                    {typeof Actions !== 'undefined' ? (\n                      Actions\n                    ) : (\n                      <>\n                        {(CustomBlock && editButton !== false) || (!CustomBlock && editButton) ? (\n                          <EditButton />\n                        ) : null}\n                        {removeButton !== false && isEditable ? <RemoveButton /> : null}\n                      </>\n                    )}\n                  </div>\n                </div>\n              }\n              isCollapsed={isCollapsed}\n              key={0}\n              onToggle={(incomingCollapsedState) => {\n                onCollapsedChange(incomingCollapsedState)\n                setIsCollapsed(incomingCollapsedState)\n              }}\n              {...(collapsibleProps || {})}\n            >\n              {children}\n            </Collapsible>\n          </div>\n        )\n      },\n    [\n      CustomBlock,\n      CustomLabel,\n      EditButton,\n      RemoveButton,\n      blockDisplayName,\n      baseClass,\n      clientBlock?.admin?.disableBlockName,\n      blockType,\n      i18n,\n      isCollapsed,\n      onCollapsedChange,\n      isEditable,\n    ],\n  )\n\n  const blockID = formData?.id\n\n  const BlockDrawer = useMemo(\n    () => () => (\n      <EditDepthProvider>\n        <Drawer\n          className={''}\n          slug={drawerSlug}\n          title={t(`lexical:blocks:inlineBlocks:${blockID ? 'edit' : 'create'}`, {\n            label: blockDisplayName ?? t('lexical:blocks:inlineBlocks:label'),\n          })}\n        >\n          {initialState ? (\n            <>\n              <RenderFields\n                fields={clientBlock?.fields ?? []}\n                forceRender\n                parentIndexPath=\"\"\n                parentPath=\"\" // See Blocks feature path for details as for why this is empty\n                parentSchemaPath={schemaFieldsPath}\n                permissions={true}\n                readOnly={!isEditable}\n              />\n              <FormSubmit programmaticSubmit={true}>{t('fields:saveChanges')}</FormSubmit>\n            </>\n          ) : null}\n        </Drawer>\n      </EditDepthProvider>\n    ),\n    [\n      initialState,\n      drawerSlug,\n      blockID,\n      blockDisplayName,\n      t,\n      isEditable,\n      clientBlock?.fields,\n      schemaFieldsPath,\n      // DO NOT ADD FORMDATA HERE! Adding formData will kick you out of sub block editors while writing.\n    ],\n  )\n\n  // Memoized Form JSX\n  const Block = useMemo(() => {\n    if (!initialState) {\n      return null\n    }\n    return (\n      <Form\n        beforeSubmit={[\n          async ({ formState }) => {\n            // This is only called when form is submitted from drawer - usually only the case if the block has a custom Block component\n            return await onChange({ formState, submit: true })\n          },\n        ]}\n        el=\"div\"\n        fields={clientBlock?.fields ?? []}\n        initialState={initialState}\n        onChange={[onChange]}\n        onSubmit={(formState, newData) => {\n          // This is only called when form is submitted from drawer - usually only the case if the block has a custom Block component\n          newData.blockType = blockType\n          editor.update(() => {\n            const node = $getNodeByKey(nodeKey)\n            if (node && $isBlockNode(node)) {\n              node.setFields(newData as BlockFields, true)\n            }\n          })\n          toggleDrawer()\n        }}\n        submitted={submitted}\n        uuid={uuid()}\n      >\n        <BlockContent\n          baseClass={baseClass}\n          BlockDrawer={BlockDrawer}\n          Collapsible={BlockCollapsible}\n          CustomBlock={CustomBlock}\n          EditButton={EditButton}\n          errorCount={errorCount}\n          formSchema={clientBlock?.fields ?? []}\n          initialState={initialState}\n          nodeKey={nodeKey}\n          RemoveButton={RemoveButton}\n        />\n      </Form>\n    )\n  }, [\n    BlockCollapsible,\n    BlockDrawer,\n    CustomBlock,\n    blockType,\n    RemoveButton,\n    EditButton,\n    baseClass,\n    editor,\n    errorCount,\n    toggleDrawer,\n    clientBlock?.fields,\n    // DO NOT ADD FORMDATA HERE! Adding formData will kick you out of sub block editors while writing.\n    initialState,\n    nodeKey,\n    onChange,\n    submitted,\n  ])\n\n  if (!clientBlock) {\n    return (\n      <BlockCollapsible disableBlockName={true} fieldHasErrors={true}>\n        <div className={`${baseClass}-not-found`}>\n          Error: Block '{blockType}' not found in the config but exists in the lexical data\n        </div>\n      </BlockCollapsible>\n    )\n  }\n\n  return Block\n}\n"],"mappings":"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","ignoreList":[]}