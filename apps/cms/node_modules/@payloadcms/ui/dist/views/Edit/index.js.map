{"version":3,"file":"index.js","names":["useModal","useRouter","useSearchParams","formatAdminURL","React","Fragment","useCallback","useEffect","useMemo","useRef","useState","DocumentControls","DocumentDrawerHeader","useDocumentDrawerContext","DocumentFields","DocumentLocked","DocumentTakeOver","LeaveWithoutSaving","LivePreviewWindow","Upload","Form","useAuth","useConfig","useDocumentEvents","useDocumentInfo","useEditDepth","useLivePreviewContext","usePreviewURL","OperationProvider","useRouteCache","useRouteTransition","useServerFunctions","UploadControlsProvider","useUploadEdits","abortAndIgnore","handleAbortRef","handleBackToDashboard","handleGoBack","handleTakeOver","Auth","SetDocumentStepNav","SetDocumentTitle","baseClass","DefaultEditView","BeforeDocumentControls","Description","EditMenuItems","LivePreview","CustomLivePreview","PreviewButton","PublishButton","SaveButton","SaveDraftButton","CustomUpload","UploadControls","id","action","AfterDocument","AfterFields","apiURL","BeforeFields","collectionSlug","currentEditor","data","disableActions","disableCreate","disableLeaveWithoutSaving","docPermissions","documentIsLocked","documentLockState","getDocPermissions","getDocPreferences","globalSlug","hasPublishPermission","hasSavePermission","incrementVersionCount","initialState","isEditing","isInitializing","isLocked","isTrashed","lastUpdateTime","redirectAfterCreate","redirectAfterDelete","redirectAfterDuplicate","redirectAfterRestore","setCurrentEditor","setData","setDocumentIsLocked","setLastUpdateTime","unlockDocument","updateDocumentEditor","clearDoc","drawerSlug","onDelete","onDuplicate","onRestore","onSave","onSaveFromContext","closeModal","isInDrawer","Boolean","refreshCookieAsync","user","config","admin","userSlug","routes","adminRoute","getEntityConfig","collectionConfig","globalConfig","depth","router","params","reportUpdate","resetUploadEdits","getFormState","startRouteTransition","clearRouteCache","isLivePreviewEnabled","isLivePreviewing","previewWindowType","setURL","setLivePreviewURL","typeofLivePreviewURL","url","livePreviewURL","isPreviewEnabled","setPreviewURL","abortOnChangeRef","abortOnSaveRef","locale","get","entitySlug","slug","operation","auth","undefined","upload","docConfig","lockDocumentsProp","lockDocuments","isLockingEnabled","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","autosaveEnabled","versions","drafts","autosave","isReadOnlyForIncomingUser","setIsReadOnlyForIncomingUser","showTakeOverModal","setShowTakeOverModal","editSessionStartTime","setEditSessionStartTime","Date","now","lockExpiryTime","isLockExpired","preventLeaveWithoutSaving","schemaPathSegments","validateBeforeSubmit","setValidateBeforeSubmit","disableLocalStrategy","nextHrefRef","handleDocumentLocking","lockedState","previousOwnerID","current","lockedUserID","hasShownLockedModal","lastEditedAt","getTime","handlePrevent","nextHref","handleLeaveConfirm","lockUser","isLockOwnedByCurrentUser","nextPath","URL","pathname","isInternalView","some","path","includes","err","console","error","json","ctx","context","formState","controller","document","doc","result","updatedAt","toISOString","redirectRoute","push","docPreferences","previewURL","state","renderAllFields","returnLivePreviewURL","returnLockStatus","returnPreviewURL","schemaPath","join","signal","skipValidation","onChange","prevFormState","submitted","currentTime","timeSinceLastUpdate","updateLastEdited","abortOnChange","abortOnSave","shouldShowDocumentLockedModal","isFolderCollection","folders","_jsx","className","filter","_jsxs","disabled","disableValidationOnSubmit","isDocumentForm","method","onSuccess","AfterHeader","showDocumentID","isActive","onReadOnly","onTakeOver","documentLockStateRef","isWithinDoc","onConfirm","onPrevent","pluralLabel","labels","plural","useAsTitle","fallback","toString","customComponents","onDrawerCreateNew","permissions","readOnlyForIncomingUser","email","loginWithUsername","readOnly","requirePassword","useAPIKey","username","verify","uploadConfig","fields","forceSidebarWrap","_Fragment"],"sources":["../../../src/views/Edit/index.tsx"],"sourcesContent":["'use client'\n\nimport type { ClientUser, DocumentViewClientProps } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport type { FormProps } from '../../forms/Form/index.js'\nimport type { FormOnSuccess } from '../../forms/Form/types.js'\nimport type { LockedState } from '../../utilities/buildFormState.js'\n\nimport { DocumentControls } from '../../elements/DocumentControls/index.js'\nimport { DocumentDrawerHeader } from '../../elements/DocumentDrawer/DrawerHeader/index.js'\nimport { useDocumentDrawerContext } from '../../elements/DocumentDrawer/Provider.js'\nimport { DocumentFields } from '../../elements/DocumentFields/index.js'\nimport { DocumentLocked } from '../../elements/DocumentLocked/index.js'\nimport { DocumentTakeOver } from '../../elements/DocumentTakeOver/index.js'\nimport { LeaveWithoutSaving } from '../../elements/LeaveWithoutSaving/index.js'\nimport { LivePreviewWindow } from '../../elements/LivePreview/Window/index.js'\nimport { Upload } from '../../elements/Upload/index.js'\nimport { Form } from '../../forms/Form/index.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentEvents } from '../../providers/DocumentEvents/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { useLivePreviewContext, usePreviewURL } from '../../providers/LivePreview/context.js'\nimport { OperationProvider } from '../../providers/Operation/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { UploadControlsProvider } from '../../providers/UploadControls/index.js'\nimport { useUploadEdits } from '../../providers/UploadEdits/index.js'\nimport { abortAndIgnore, handleAbortRef } from '../../utilities/abortAndIgnore.js'\nimport { handleBackToDashboard } from '../../utilities/handleBackToDashboard.js'\nimport { handleGoBack } from '../../utilities/handleGoBack.js'\nimport { handleTakeOver } from '../../utilities/handleTakeOver.js'\nimport { Auth } from './Auth/index.js'\nimport { SetDocumentStepNav } from './SetDocumentStepNav/index.js'\nimport './index.scss'\nimport { SetDocumentTitle } from './SetDocumentTitle/index.js'\n\nconst baseClass = 'collection-edit'\n\nexport type OnSaveContext = {\n  getDocPermissions?: boolean\n  incrementVersionCount?: boolean\n}\n\n// This component receives props only on _pages_\n// When rendered within a drawer, props are empty\n// This is solely to support custom edit views which get server-rendered\nexport function DefaultEditView({\n  BeforeDocumentControls,\n  Description,\n  EditMenuItems,\n  LivePreview: CustomLivePreview,\n  PreviewButton,\n  PublishButton,\n  SaveButton,\n  SaveDraftButton,\n  Upload: CustomUpload,\n  UploadControls,\n}: DocumentViewClientProps) {\n  const {\n    id,\n    action,\n    AfterDocument,\n    AfterFields,\n    apiURL,\n    BeforeFields,\n    collectionSlug,\n    currentEditor,\n    data,\n    disableActions,\n    disableCreate,\n    disableLeaveWithoutSaving,\n    docPermissions,\n    documentIsLocked,\n    documentLockState,\n    getDocPermissions,\n    getDocPreferences,\n    globalSlug,\n    hasPublishPermission,\n    hasSavePermission,\n    incrementVersionCount,\n    initialState,\n    isEditing,\n    isInitializing,\n    isLocked,\n    isTrashed,\n    lastUpdateTime,\n    redirectAfterCreate,\n    redirectAfterDelete,\n    redirectAfterDuplicate,\n    redirectAfterRestore,\n    setCurrentEditor,\n    setData,\n    setDocumentIsLocked,\n    setLastUpdateTime,\n    unlockDocument,\n    updateDocumentEditor,\n  } = useDocumentInfo()\n\n  const {\n    clearDoc,\n    drawerSlug,\n    onDelete,\n    onDuplicate,\n    onRestore,\n    onSave: onSaveFromContext,\n  } = useDocumentDrawerContext()\n  const { closeModal } = useModal()\n\n  const isInDrawer = Boolean(drawerSlug)\n\n  const { refreshCookieAsync, user } = useAuth()\n\n  const {\n    config,\n    config: {\n      admin: { user: userSlug },\n      routes: { admin: adminRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n  const globalConfig = getEntityConfig({ globalSlug })\n\n  const depth = useEditDepth()\n\n  const router = useRouter()\n  const params = useSearchParams()\n  const { reportUpdate } = useDocumentEvents()\n  const { resetUploadEdits } = useUploadEdits()\n  const { getFormState } = useServerFunctions()\n  const { startRouteTransition } = useRouteTransition()\n  const { clearRouteCache } = useRouteCache()\n  const {\n    isLivePreviewEnabled,\n    isLivePreviewing,\n    previewWindowType,\n    setURL: setLivePreviewURL,\n    typeofLivePreviewURL,\n    url: livePreviewURL,\n  } = useLivePreviewContext()\n  const { isPreviewEnabled, setPreviewURL } = usePreviewURL()\n\n  const abortOnChangeRef = useRef<AbortController>(null)\n  const abortOnSaveRef = useRef<AbortController>(null)\n\n  const locale = params.get('locale')\n\n  const entitySlug = collectionConfig?.slug || globalConfig?.slug\n\n  const operation = collectionSlug && !id ? 'create' : 'update'\n\n  const auth = collectionConfig ? collectionConfig.auth : undefined\n  const upload = collectionConfig ? collectionConfig.upload : undefined\n\n  const docConfig = collectionConfig || globalConfig\n\n  const lockDocumentsProp = docConfig?.lockDocuments !== undefined ? docConfig?.lockDocuments : true\n  const isLockingEnabled = lockDocumentsProp !== false\n\n  const lockDurationDefault = 300 // Default 5 minutes in seconds\n  const lockDuration =\n    typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n  const lockDurationInMilliseconds = lockDuration * 1000\n\n  const autosaveEnabled = Boolean(\n    (collectionConfig?.versions?.drafts && collectionConfig?.versions?.drafts?.autosave) ||\n      (globalConfig?.versions?.drafts && globalConfig?.versions?.drafts?.autosave),\n  )\n\n  const [isReadOnlyForIncomingUser, setIsReadOnlyForIncomingUser] = useState(false)\n  const [showTakeOverModal, setShowTakeOverModal] = useState(false)\n\n  const [editSessionStartTime, setEditSessionStartTime] = useState(Date.now())\n\n  const lockExpiryTime = lastUpdateTime + lockDurationInMilliseconds\n  const isLockExpired = Date.now() > lockExpiryTime\n\n  const preventLeaveWithoutSaving =\n    !isReadOnlyForIncomingUser &&\n    (typeof disableLeaveWithoutSaving !== 'undefined'\n      ? !disableLeaveWithoutSaving\n      : !autosaveEnabled)\n\n  const schemaPathSegments = useMemo(() => [entitySlug], [entitySlug])\n\n  const [validateBeforeSubmit, setValidateBeforeSubmit] = useState(() => {\n    if (operation === 'create' && auth && !auth.disableLocalStrategy) {\n      return true\n    }\n\n    return false\n  })\n\n  const nextHrefRef = React.useRef<null | string>(null)\n\n  const handleDocumentLocking = useCallback(\n    (lockedState: LockedState) => {\n      setDocumentIsLocked(true)\n      const previousOwnerID =\n        typeof documentLockState.current?.user === 'object'\n          ? documentLockState.current?.user?.id\n          : documentLockState.current?.user\n\n      if (lockedState) {\n        const lockedUserID =\n          typeof lockedState.user === 'string' || typeof lockedState.user === 'number'\n            ? lockedState.user\n            : lockedState.user.id\n\n        if (!documentLockState.current || lockedUserID !== previousOwnerID) {\n          if (previousOwnerID === user.id && lockedUserID !== user.id) {\n            setShowTakeOverModal(true)\n            documentLockState.current.hasShownLockedModal = true\n          }\n\n          documentLockState.current = {\n            hasShownLockedModal: documentLockState.current?.hasShownLockedModal || false,\n            isLocked: true,\n            user: lockedState.user as ClientUser,\n          }\n          setCurrentEditor(lockedState.user as ClientUser)\n        }\n\n        // Update lastUpdateTime when lock state changes\n        if (lockedState.lastEditedAt) {\n          setLastUpdateTime(new Date(lockedState.lastEditedAt).getTime())\n        }\n      }\n    },\n    [documentLockState, setCurrentEditor, setDocumentIsLocked, setLastUpdateTime, user?.id],\n  )\n\n  const handlePrevent = useCallback((nextHref: null | string) => {\n    nextHrefRef.current = nextHref\n  }, [])\n\n  const handleLeaveConfirm = useCallback(async () => {\n    const lockUser = documentLockState.current?.user\n\n    const isLockOwnedByCurrentUser =\n      typeof lockUser === 'object' ? lockUser?.id === user?.id : lockUser === user?.id\n\n    if (isLockingEnabled && documentIsLocked && (id || globalSlug)) {\n      // Check where user is trying to go\n      const nextPath = nextHrefRef.current ? new URL(nextHrefRef.current).pathname : ''\n      const isInternalView = ['/preview', '/api', '/versions'].some((path) =>\n        nextPath.includes(path),\n      )\n\n      // Remove the lock if the user is navigating away from the document view they have locked\n      if (isLockOwnedByCurrentUser && !isInternalView) {\n        try {\n          await unlockDocument(id, collectionSlug ?? globalSlug)\n          setDocumentIsLocked(false)\n          setCurrentEditor(null)\n        } catch (err) {\n          console.error('Failed to unlock before leave', err) // eslint-disable-line no-console\n        }\n      }\n    }\n  }, [\n    collectionSlug,\n    documentIsLocked,\n    documentLockState,\n    globalSlug,\n    id,\n    isLockingEnabled,\n    setCurrentEditor,\n    setDocumentIsLocked,\n    unlockDocument,\n    user?.id,\n  ])\n\n  const onSave: FormOnSuccess<any, OnSaveContext> = useCallback(\n    async (json, ctx) => {\n      const { context, formState } = ctx || {}\n\n      const controller = handleAbortRef(abortOnSaveRef)\n\n      const document = json?.doc || json?.result\n\n      const updatedAt = document?.updatedAt || new Date().toISOString()\n\n      // If we're editing the doc of the logged-in user,\n      // Refresh the cookie to get new permissions\n      if (user && collectionSlug === userSlug && id === user.id) {\n        void refreshCookieAsync()\n      }\n\n      setLastUpdateTime(updatedAt)\n\n      if (context?.incrementVersionCount !== false) {\n        incrementVersionCount()\n      }\n\n      if (typeof setData === 'function') {\n        void setData(document || {})\n      }\n\n      if (typeof onSaveFromContext === 'function') {\n        const operation = id ? 'update' : 'create'\n\n        void onSaveFromContext({\n          ...(json as Record<string, unknown>),\n          context,\n          operation,\n          // @ts-expect-error todo: this is not right, should be under `doc`?\n          updatedAt:\n            operation === 'update'\n              ? new Date().toISOString()\n              : document?.updatedAt || new Date().toISOString(),\n        })\n      }\n\n      if (!isEditing && depth < 2 && redirectAfterCreate !== false) {\n        // Redirect to the same locale if it's been set\n        const redirectRoute = formatAdminURL({\n          adminRoute,\n          path: `/collections/${collectionSlug}/${document?.id}${locale ? `?locale=${locale}` : ''}`,\n        })\n\n        startRouteTransition(() => router.push(redirectRoute))\n      } else {\n        resetUploadEdits()\n      }\n\n      if (context?.getDocPermissions !== false) {\n        await getDocPermissions(json)\n      }\n\n      if (id || globalSlug) {\n        const docPreferences = await getDocPreferences()\n\n        const { livePreviewURL, previewURL, state } = await getFormState({\n          id,\n          collectionSlug,\n          data: document,\n          docPermissions,\n          docPreferences,\n          formState,\n          globalSlug,\n          operation,\n          renderAllFields: false,\n          returnLivePreviewURL: isLivePreviewEnabled && typeofLivePreviewURL === 'function',\n          returnLockStatus: false,\n          returnPreviewURL: isPreviewEnabled,\n          schemaPath: schemaPathSegments.join('.'),\n          signal: controller.signal,\n          skipValidation: true,\n        })\n\n        // Unlock the document after save\n        if (isLockingEnabled) {\n          setDocumentIsLocked(false)\n        }\n\n        if (isLivePreviewEnabled && typeofLivePreviewURL === 'function') {\n          setLivePreviewURL(livePreviewURL)\n        }\n\n        if (isPreviewEnabled) {\n          setPreviewURL(previewURL)\n        }\n\n        reportUpdate({\n          id,\n          entitySlug,\n          updatedAt,\n        })\n\n        abortOnSaveRef.current = null\n\n        return state\n      }\n    },\n    [\n      reportUpdate,\n      id,\n      entitySlug,\n      user,\n      collectionSlug,\n      userSlug,\n      setLastUpdateTime,\n      setData,\n      onSaveFromContext,\n      isEditing,\n      depth,\n      redirectAfterCreate,\n      setLivePreviewURL,\n      setPreviewURL,\n      globalSlug,\n      refreshCookieAsync,\n      incrementVersionCount,\n      adminRoute,\n      locale,\n      startRouteTransition,\n      router,\n      resetUploadEdits,\n      getDocPermissions,\n      getDocPreferences,\n      getFormState,\n      docPermissions,\n      operation,\n      isLivePreviewEnabled,\n      isPreviewEnabled,\n      typeofLivePreviewURL,\n      schemaPathSegments,\n      isLockingEnabled,\n      setDocumentIsLocked,\n    ],\n  )\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState, submitted }) => {\n      const controller = handleAbortRef(abortOnChangeRef)\n\n      const currentTime = Date.now()\n      const timeSinceLastUpdate = currentTime - editSessionStartTime\n\n      const updateLastEdited = isLockingEnabled && timeSinceLastUpdate >= 10000 // 10 seconds\n\n      if (updateLastEdited) {\n        setEditSessionStartTime(currentTime)\n      }\n\n      const docPreferences = await getDocPreferences()\n\n      const result = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions,\n        docPreferences,\n        formState: prevFormState,\n        globalSlug,\n        operation,\n        renderAllFields: false,\n        returnLockStatus: isLockingEnabled,\n        schemaPath: schemaPathSegments.join('.'),\n        signal: controller.signal,\n        skipValidation: !submitted,\n        updateLastEdited,\n      })\n\n      if (!result) {\n        return\n      }\n\n      const { lockedState, state } = result\n\n      if (isLockingEnabled) {\n        handleDocumentLocking(lockedState)\n      }\n\n      abortOnChangeRef.current = null\n\n      return state\n    },\n    [\n      editSessionStartTime,\n      isLockingEnabled,\n      getDocPreferences,\n      getFormState,\n      id,\n      collectionSlug,\n      docPermissions,\n      globalSlug,\n      operation,\n      schemaPathSegments,\n      handleDocumentLocking,\n    ],\n  )\n\n  // Clean up when the component unmounts or when the document is unlocked\n  useEffect(() => {\n    return () => {\n      setShowTakeOverModal(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    const abortOnChange = abortOnChangeRef.current\n    const abortOnSave = abortOnSaveRef.current\n\n    return () => {\n      abortAndIgnore(abortOnChange)\n      abortAndIgnore(abortOnSave)\n    }\n  }, [])\n\n  const shouldShowDocumentLockedModal =\n    documentIsLocked &&\n    currentEditor &&\n    (typeof currentEditor === 'object'\n      ? currentEditor.id !== user?.id\n      : currentEditor !== user?.id) &&\n    !isReadOnlyForIncomingUser &&\n    !showTakeOverModal &&\n    !documentLockState.current?.hasShownLockedModal &&\n    !isLockExpired\n\n  const isFolderCollection = config.folders && collectionSlug === config.folders?.slug\n\n  return (\n    <main\n      className={[\n        baseClass,\n        (id || globalSlug) && `${baseClass}--is-editing`,\n        globalSlug && `global-edit--${globalSlug}`,\n        collectionSlug && `collection-edit--${collectionSlug}`,\n        isLivePreviewing && previewWindowType === 'iframe' && `${baseClass}--is-live-previewing`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n    >\n      <OperationProvider operation={operation}>\n        <Form\n          action={action}\n          className={`${baseClass}__form`}\n          disabled={isReadOnlyForIncomingUser || isInitializing || !hasSavePermission || isTrashed}\n          disableValidationOnSubmit={!validateBeforeSubmit}\n          initialState={!isInitializing && initialState}\n          isDocumentForm={true}\n          isInitializing={isInitializing}\n          key={`${isLocked}`}\n          method={id ? 'PATCH' : 'POST'}\n          onChange={[onChange]}\n          onSuccess={onSave}\n        >\n          {isInDrawer && (\n            <DocumentDrawerHeader\n              AfterHeader={Description}\n              drawerSlug={drawerSlug}\n              showDocumentID={!isFolderCollection}\n            />\n          )}\n          {isLockingEnabled && shouldShowDocumentLockedModal && (\n            <DocumentLocked\n              handleGoBack={() => handleGoBack({ adminRoute, collectionSlug, router })}\n              isActive={shouldShowDocumentLockedModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n              onTakeOver={() =>\n                handleTakeOver({\n                  id,\n                  clearRouteCache,\n                  collectionSlug,\n                  documentLockStateRef: documentLockState,\n                  globalSlug,\n                  isLockingEnabled,\n                  isWithinDoc: false,\n                  setCurrentEditor,\n                  updateDocumentEditor,\n                  user,\n                })\n              }\n              updatedAt={lastUpdateTime}\n              user={currentEditor}\n            />\n          )}\n          {isLockingEnabled && showTakeOverModal && (\n            <DocumentTakeOver\n              handleBackToDashboard={() => handleBackToDashboard({ adminRoute, router })}\n              isActive={showTakeOverModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n            />\n          )}\n          {preventLeaveWithoutSaving && (\n            <LeaveWithoutSaving onConfirm={handleLeaveConfirm} onPrevent={handlePrevent} />\n          )}\n          {!isInDrawer && (\n            <SetDocumentStepNav\n              collectionSlug={collectionConfig?.slug}\n              globalSlug={globalConfig?.slug}\n              id={id}\n              isTrashed={isTrashed}\n              pluralLabel={collectionConfig?.labels?.plural}\n              useAsTitle={collectionConfig?.admin?.useAsTitle}\n            />\n          )}\n          <SetDocumentTitle\n            collectionConfig={collectionConfig}\n            config={config}\n            fallback={depth <= 1 ? id?.toString() : undefined}\n            globalConfig={globalConfig}\n          />\n          <DocumentControls\n            apiURL={apiURL}\n            BeforeDocumentControls={BeforeDocumentControls}\n            customComponents={{\n              PreviewButton,\n              PublishButton,\n              SaveButton,\n              SaveDraftButton,\n            }}\n            data={data}\n            disableActions={disableActions || isFolderCollection || isTrashed}\n            disableCreate={disableCreate}\n            EditMenuItems={EditMenuItems}\n            hasPublishPermission={hasPublishPermission}\n            hasSavePermission={hasSavePermission}\n            id={id}\n            isEditing={isEditing}\n            isInDrawer={isInDrawer}\n            isTrashed={isTrashed}\n            onDelete={onDelete}\n            onDrawerCreateNew={clearDoc}\n            onDuplicate={onDuplicate}\n            onRestore={onRestore}\n            onSave={onSave}\n            onTakeOver={() =>\n              handleTakeOver({\n                id,\n                clearRouteCache,\n                collectionSlug,\n                documentLockStateRef: documentLockState,\n                globalSlug,\n                isLockingEnabled,\n                isWithinDoc: true,\n                setCurrentEditor,\n                setIsReadOnlyForIncomingUser,\n                updateDocumentEditor,\n                user,\n              })\n            }\n            permissions={docPermissions}\n            readOnlyForIncomingUser={isReadOnlyForIncomingUser}\n            redirectAfterDelete={redirectAfterDelete}\n            redirectAfterDuplicate={redirectAfterDuplicate}\n            redirectAfterRestore={redirectAfterRestore}\n            slug={collectionConfig?.slug || globalConfig?.slug}\n            user={currentEditor}\n          />\n          <div\n            className={[\n              `${baseClass}__main-wrapper`,\n              previewWindowType === 'popup' && `${baseClass}--detached`,\n            ]\n              .filter(Boolean)\n              .join(' ')}\n          >\n            <div\n              className={[\n                `${baseClass}__main`,\n                previewWindowType === 'popup' && `${baseClass}__main--popup-open`,\n              ]\n                .filter(Boolean)\n                .join(' ')}\n            >\n              <DocumentFields\n                AfterFields={AfterFields}\n                BeforeFields={\n                  BeforeFields || (\n                    <Fragment>\n                      {auth && (\n                        <Auth\n                          className={`${baseClass}__auth`}\n                          collectionSlug={collectionConfig.slug}\n                          disableLocalStrategy={collectionConfig.auth?.disableLocalStrategy}\n                          email={data?.email}\n                          loginWithUsername={auth?.loginWithUsername}\n                          operation={operation}\n                          readOnly={!hasSavePermission}\n                          requirePassword={!id}\n                          setValidateBeforeSubmit={setValidateBeforeSubmit}\n                          // eslint-disable-next-line react-compiler/react-compiler\n                          useAPIKey={auth.useAPIKey}\n                          username={data?.username}\n                          verify={auth.verify}\n                        />\n                      )}\n                      {upload && (\n                        <React.Fragment>\n                          <UploadControlsProvider>\n                            {CustomUpload || (\n                              <Upload\n                                collectionSlug={collectionConfig.slug}\n                                initialState={initialState}\n                                uploadConfig={upload}\n                                UploadControls={UploadControls}\n                              />\n                            )}\n                          </UploadControlsProvider>\n                        </React.Fragment>\n                      )}\n                    </Fragment>\n                  )\n                }\n                Description={Description}\n                docPermissions={docPermissions}\n                fields={docConfig.fields}\n                forceSidebarWrap={isLivePreviewing}\n                isTrashed={isTrashed}\n                readOnly={isReadOnlyForIncomingUser || !hasSavePermission || isTrashed}\n                schemaPathSegments={schemaPathSegments}\n              />\n              {AfterDocument}\n            </div>\n            {isLivePreviewEnabled && !isInDrawer && livePreviewURL && (\n              <>\n                {CustomLivePreview || (\n                  <LivePreviewWindow collectionSlug={collectionSlug} globalSlug={globalSlug} />\n                )}\n              </>\n            )}\n          </div>\n        </Form>\n      </OperationProvider>\n    </main>\n  )\n}\n"],"mappings":"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","ignoreList":[]}