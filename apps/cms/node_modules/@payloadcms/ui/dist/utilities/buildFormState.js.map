{"version":3,"file":"buildFormState.js","names":["canAccessAdmin","formatErrors","getSelectMode","reduceFieldsToValues","fieldSchemasToFormState","renderField","getClientConfig","getClientSchemaMap","getSchemaMap","handleFormStateLocking","handleLivePreview","handlePreview","buildFormStateHandler","args","req","res","buildFormState","err","payload","logger","error","msg","message","Error","id","idFromArgs","collectionSlug","data","incomingData","docPermissions","docPreferences","documentFormState","formState","globalSlug","initialBlockData","initialBlockFormState","mockRSCs","operation","readOnly","renderAllFields","i18n","config","returnLivePreviewURL","returnLockStatus","returnPreviewURL","schemaPath","select","skipClientConfigAuth","skipValidation","updateLastEdited","selectMode","undefined","schemaMap","clientSchemaMap","importMap","user","fieldOrEntityConfig","get","fields","length","type","documentData","blockData","Array","isArray","formStateResult","clientFieldSchemaMap","fieldSchemaMap","permissions","preferences","previousFormState","renderFieldFn","collections","upload","file","lockedStateResult","lockedState","state","livePreviewURL","previewURL"],"sources":["../../src/utilities/buildFormState.ts"],"sourcesContent":["import type {\n  BuildFormStateArgs,\n  ClientConfig,\n  ClientUser,\n  ErrorResult,\n  FormState,\n  ServerFunction,\n} from 'payload'\n\nimport { canAccessAdmin, formatErrors } from 'payload'\nimport { getSelectMode, reduceFieldsToValues } from 'payload/shared'\n\nimport { fieldSchemasToFormState } from '../forms/fieldSchemasToFormState/index.js'\nimport { renderField } from '../forms/fieldSchemasToFormState/renderField.js'\nimport { getClientConfig } from './getClientConfig.js'\nimport { getClientSchemaMap } from './getClientSchemaMap.js'\nimport { getSchemaMap } from './getSchemaMap.js'\nimport { handleFormStateLocking } from './handleFormStateLocking.js'\nimport { handleLivePreview } from './handleLivePreview.js'\nimport { handlePreview } from './handlePreview.js'\n\nexport type LockedState = {\n  isLocked: boolean\n  lastEditedAt: string\n  user: ClientUser | number | string\n}\n\ntype BuildFormStateSuccessResult = {\n  clientConfig?: ClientConfig\n  errors?: never\n  indexPath?: string\n  livePreviewURL?: string\n  lockedState?: LockedState\n  previewURL?: string\n  state: FormState\n}\n\ntype BuildFormStateErrorResult = {\n  livePreviewURL?: never\n  lockedState?: never\n  previewURL?: never\n  state?: never\n} & (\n  | {\n      message: string\n    }\n  | ErrorResult\n)\n\nexport type BuildFormStateResult = BuildFormStateErrorResult | BuildFormStateSuccessResult\n\nexport const buildFormStateHandler: ServerFunction<\n  BuildFormStateArgs,\n  Promise<BuildFormStateResult>\n> = async (args) => {\n  const { req } = args\n\n  try {\n    await canAccessAdmin({ req })\n    const res = await buildFormState(args)\n\n    return res\n  } catch (err) {\n    req.payload.logger.error({ err, msg: `There was an error building form state` })\n\n    if (err.message === 'Could not find field schema for given path') {\n      return {\n        message: err.message,\n      }\n    }\n\n    if (err.message === 'Unauthorized') {\n      throw new Error('Unauthorized')\n    }\n\n    return formatErrors(err)\n  }\n}\n\nexport const buildFormState = async (\n  args: BuildFormStateArgs,\n): Promise<BuildFormStateSuccessResult> => {\n  const {\n    id: idFromArgs,\n    collectionSlug,\n    data: incomingData,\n    docPermissions,\n    docPreferences,\n    documentFormState,\n    formState,\n    globalSlug,\n    initialBlockData,\n    initialBlockFormState,\n    mockRSCs,\n    operation,\n    readOnly,\n    renderAllFields,\n    req,\n    req: {\n      i18n,\n      payload,\n      payload: { config },\n    },\n    returnLivePreviewURL,\n    returnLockStatus,\n    returnPreviewURL,\n    schemaPath = collectionSlug || globalSlug,\n    select,\n    skipClientConfigAuth,\n    skipValidation,\n    updateLastEdited,\n  } = args\n\n  const selectMode = select ? getSelectMode(select) : undefined\n\n  if (!collectionSlug && !globalSlug) {\n    throw new Error('Either collectionSlug or globalSlug must be provided')\n  }\n\n  const schemaMap = getSchemaMap({\n    collectionSlug,\n    config,\n    globalSlug,\n    i18n,\n  })\n\n  const clientSchemaMap = getClientSchemaMap({\n    collectionSlug,\n    config: getClientConfig({\n      config,\n      i18n,\n      importMap: req.payload.importMap,\n      user: skipClientConfigAuth ? true : req.user,\n    }),\n    globalSlug,\n    i18n,\n    payload,\n    schemaMap,\n  })\n\n  const id = collectionSlug ? idFromArgs : undefined\n  const fieldOrEntityConfig = schemaMap.get(schemaPath)\n\n  if (!fieldOrEntityConfig) {\n    throw new Error(`Could not find \"${schemaPath}\" in the fieldSchemaMap`)\n  }\n\n  if (\n    (!('fields' in fieldOrEntityConfig) ||\n      !fieldOrEntityConfig.fields ||\n      !fieldOrEntityConfig.fields.length) &&\n    'type' in fieldOrEntityConfig &&\n    fieldOrEntityConfig.type !== 'blocks'\n  ) {\n    throw new Error(\n      `The field found in fieldSchemaMap for \"${schemaPath}\" does not contain any subfields.`,\n    )\n  }\n\n  // If there is form state but no data, deduce data from that form state, e.g. on initial load\n  // Otherwise, use the incoming data as the source of truth, e.g. on subsequent saves\n  const data = incomingData || reduceFieldsToValues(formState, true)\n\n  let documentData = undefined\n\n  if (documentFormState) {\n    documentData = reduceFieldsToValues(documentFormState, true)\n  }\n\n  let blockData = initialBlockData\n\n  if (initialBlockFormState) {\n    blockData = reduceFieldsToValues(initialBlockFormState, true)\n  }\n\n  /**\n   * When building state for sub schemas we need to adjust:\n   * - `fields`\n   * - `parentSchemaPath`\n   * - `parentPath`\n   *\n   * Type assertion is fine because we wrap sub schemas in an array\n   * so we can safely map over them within `fieldSchemasToFormState`\n   */\n  const fields = Array.isArray(fieldOrEntityConfig)\n    ? fieldOrEntityConfig\n    : 'fields' in fieldOrEntityConfig\n      ? fieldOrEntityConfig.fields\n      : [fieldOrEntityConfig]\n\n  // Ensure data.id is present during form state requests, where the data\n  // is passed from the client as an argument, without the ID\n  if (!data.id && id) {\n    data.id = id\n  }\n\n  const formStateResult = await fieldSchemasToFormState({\n    id,\n    clientFieldSchemaMap: clientSchemaMap,\n    collectionSlug,\n    data,\n    documentData,\n    fields,\n    fieldSchemaMap: schemaMap,\n    initialBlockData: blockData,\n    mockRSCs,\n    operation,\n    permissions: docPermissions?.fields || {},\n    preferences: docPreferences || { fields: {} },\n    previousFormState: formState,\n    readOnly,\n    renderAllFields,\n    renderFieldFn: renderField,\n    req,\n    schemaPath,\n    select,\n    selectMode,\n    skipValidation,\n  })\n\n  // Maintain form state of auth / upload fields\n  if (collectionSlug && formState) {\n    if (payload.collections[collectionSlug]?.config?.upload && formState.file) {\n      formStateResult.file = formState.file\n    }\n  }\n\n  let lockedStateResult\n\n  if (returnLockStatus) {\n    lockedStateResult = await handleFormStateLocking({\n      id,\n      collectionSlug,\n      globalSlug,\n      req,\n      updateLastEdited,\n    })\n  }\n\n  const res: BuildFormStateSuccessResult = {\n    lockedState: lockedStateResult,\n    state: formStateResult,\n  }\n\n  if (returnLivePreviewURL) {\n    const { livePreviewURL } = await handleLivePreview({\n      collectionSlug,\n      config,\n      data,\n      globalSlug,\n      req,\n    })\n\n    // Important: only set this when not undefined,\n    // Otherwise it will travel through the network as `$undefined`\n    if (livePreviewURL) {\n      res.livePreviewURL = livePreviewURL\n    }\n  }\n\n  if (returnPreviewURL) {\n    const { previewURL } = await handlePreview({\n      collectionSlug,\n      config,\n      data,\n      globalSlug,\n      req,\n    })\n\n    // Important: only set this when not undefined,\n    // Otherwise it will travel through the network as `$undefined`\n    if (previewURL) {\n      res.previewURL = previewURL\n    }\n  }\n\n  return res\n}\n"],"mappings":"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","ignoreList":[]}