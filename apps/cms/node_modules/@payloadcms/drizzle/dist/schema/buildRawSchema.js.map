{"version":3,"sources":["../../src/schema/buildRawSchema.ts"],"sourcesContent":["import {\n  buildVersionCollectionFields,\n  buildVersionCompoundIndexes,\n  buildVersionGlobalFields,\n} from 'payload'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter, RawIndex, SetColumnID } from '../types.js'\n\nimport { createTableName } from '../createTableName.js'\nimport { buildIndexName } from '../utilities/buildIndexName.js'\nimport { buildTable } from './build.js'\n\n/**\n * Builds abstract Payload SQL schema\n */\nexport const buildRawSchema = ({\n  adapter,\n  setColumnID,\n}: {\n  adapter: DrizzleAdapter\n  setColumnID: SetColumnID\n}) => {\n  adapter.indexes = new Set()\n  adapter.foreignKeys = new Set()\n\n  adapter.payload.config.collections.forEach((collection) => {\n    createTableName({\n      adapter,\n      config: collection,\n    })\n\n    if (collection.versions) {\n      createTableName({\n        adapter,\n        config: collection,\n        versions: true,\n        versionsCustomName: true,\n      })\n    }\n  })\n\n  adapter.payload.config.collections.forEach((collection) => {\n    const tableName = adapter.tableNameMap.get(toSnakeCase(collection.slug))\n    const config = adapter.payload.config\n\n    const baseIndexes: Record<string, RawIndex> = {}\n\n    if (collection.upload.filenameCompoundIndex) {\n      const indexName = buildIndexName({ name: `${tableName}_filename_compound_idx`, adapter })\n\n      baseIndexes.filename_compound_index = {\n        name: indexName,\n        on: collection.upload.filenameCompoundIndex.map((f) => f),\n        unique: true,\n      }\n    }\n\n    buildTable({\n      adapter,\n      blocksTableNameMap: {},\n      compoundIndexes: collection.sanitizedIndexes,\n      disableNotNull: !!collection?.versions?.drafts,\n      disableUnique: false,\n      fields: collection.flattenedFields,\n      parentIsLocalized: false,\n      setColumnID,\n      tableName,\n      timestamps: collection.timestamps,\n      versions: false,\n    })\n\n    if (collection.versions) {\n      const versionsTableName = adapter.tableNameMap.get(\n        `_${toSnakeCase(collection.slug)}${adapter.versionsSuffix}`,\n      )\n      const versionFields = buildVersionCollectionFields(config, collection, true)\n\n      buildTable({\n        adapter,\n        blocksTableNameMap: {},\n        compoundIndexes: buildVersionCompoundIndexes({ indexes: collection.sanitizedIndexes }),\n        disableNotNull: !!collection.versions?.drafts,\n        disableUnique: true,\n        fields: versionFields,\n        parentIsLocalized: false,\n        setColumnID,\n        tableName: versionsTableName,\n        timestamps: true,\n        versions: true,\n      })\n    }\n  })\n\n  adapter.payload.config.globals.forEach((global) => {\n    const tableName = createTableName({\n      adapter,\n      config: global,\n    })\n\n    buildTable({\n      adapter,\n      blocksTableNameMap: {},\n      disableNotNull: !!global?.versions?.drafts,\n      disableUnique: false,\n      fields: global.flattenedFields,\n      parentIsLocalized: false,\n      setColumnID,\n      tableName,\n      timestamps: false,\n      versions: false,\n    })\n\n    if (global.versions) {\n      const versionsTableName = createTableName({\n        adapter,\n        config: global,\n        versions: true,\n        versionsCustomName: true,\n      })\n      const config = adapter.payload.config\n      const versionFields = buildVersionGlobalFields(config, global, true)\n\n      buildTable({\n        adapter,\n        blocksTableNameMap: {},\n        disableNotNull: !!global.versions?.drafts,\n        disableUnique: true,\n        fields: versionFields,\n        parentIsLocalized: false,\n        setColumnID,\n        tableName: versionsTableName,\n        timestamps: true,\n        versions: true,\n      })\n    }\n  })\n}\n"],"names":["buildVersionCollectionFields","buildVersionCompoundIndexes","buildVersionGlobalFields","toSnakeCase","createTableName","buildIndexName","buildTable","buildRawSchema","adapter","setColumnID","indexes","Set","foreignKeys","payload","config","collections","forEach","collection","versions","versionsCustomName","tableName","tableNameMap","get","slug","baseIndexes","upload","filenameCompoundIndex","indexName","name","filename_compound_index","on","map","f","unique","blocksTableNameMap","compoundIndexes","sanitizedIndexes","disableNotNull","drafts","disableUnique","fields","flattenedFields","parentIsLocalized","timestamps","versionsTableName","versionsSuffix","versionFields","globals","global"],"mappings":"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"}