import type { SanitizedCollectionConfig } from '../collections/config/types.js';
import type { SanitizedGlobalConfig } from '../globals/config/types.js';
import type { Payload } from '../index.js';
import type { JsonObject, PayloadRequest, SelectType } from '../types/index.js';
type Args<T extends JsonObject = JsonObject> = {
    autosave?: boolean;
    collection?: SanitizedCollectionConfig;
    docWithLocales: T;
    draft?: boolean;
    global?: SanitizedGlobalConfig;
    id?: number | string;
    operation?: 'create' | 'restoreVersion' | 'update';
    payload: Payload;
    publishSpecificLocale?: string;
    req?: PayloadRequest;
    select?: SelectType;
    snapshot?: any;
};
export declare const saveVersion: <TData extends JsonObject = JsonObject>({ id, autosave, collection, docWithLocales, draft, global, operation, payload, publishSpecificLocale, req, select, snapshot, }: Args<TData>) => Promise<JsonObject>;
export {};
//# sourceMappingURL=saveVersion.d.ts.map