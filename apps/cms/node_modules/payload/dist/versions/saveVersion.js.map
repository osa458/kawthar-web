{"version":3,"sources":["../../src/versions/saveVersion.ts"],"sourcesContent":["import type { SanitizedCollectionConfig } from '../collections/config/types.js'\nimport type { SanitizedGlobalConfig } from '../globals/config/types.js'\nimport type { CreateGlobalVersionArgs, CreateVersionArgs, Payload } from '../index.js'\nimport type { JsonObject, PayloadRequest, SelectType } from '../types/index.js'\n\nimport { deepCopyObjectSimple } from '../index.js'\nimport { sanitizeInternalFields } from '../utilities/sanitizeInternalFields.js'\nimport { getQueryDraftsSelect } from './drafts/getQueryDraftsSelect.js'\nimport { enforceMaxVersions } from './enforceMaxVersions.js'\nimport { saveSnapshot } from './saveSnapshot.js'\n\ntype Args<T extends JsonObject = JsonObject> = {\n  autosave?: boolean\n  collection?: SanitizedCollectionConfig\n  docWithLocales: T\n  draft?: boolean\n  global?: SanitizedGlobalConfig\n  id?: number | string\n  operation?: 'create' | 'restoreVersion' | 'update'\n  payload: Payload\n  publishSpecificLocale?: string\n  req?: PayloadRequest\n  select?: SelectType\n  snapshot?: any\n}\n\nexport const saveVersion = async <TData extends JsonObject = JsonObject>({\n  id,\n  autosave,\n  collection,\n  docWithLocales,\n  draft,\n  global,\n  operation,\n  payload,\n  publishSpecificLocale,\n  req,\n  select,\n  snapshot,\n}: Args<TData>): Promise<JsonObject> => {\n  let result: JsonObject | undefined\n  let createNewVersion = true\n  const now = new Date().toISOString()\n  const versionData: {\n    _status?: 'draft'\n    updatedAt?: string\n  } & TData = deepCopyObjectSimple(docWithLocales)\n\n  if (draft) {\n    versionData._status = 'draft'\n  }\n\n  if (collection?.timestamps && draft) {\n    versionData.updatedAt = now\n  }\n\n  if (versionData._id) {\n    delete versionData._id\n  }\n\n  try {\n    if (autosave) {\n      let docs\n      const findVersionArgs = {\n        limit: 1,\n        pagination: false,\n        req,\n        sort: '-updatedAt',\n      }\n\n      if (collection) {\n        ;({ docs } = await payload.db.findVersions<TData>({\n          ...findVersionArgs,\n          collection: collection.slug,\n          limit: 1,\n          pagination: false,\n          req,\n          where: {\n            parent: {\n              equals: id,\n            },\n          },\n        }))\n      } else {\n        ;({ docs } = await payload.db.findGlobalVersions<TData>({\n          ...findVersionArgs,\n          global: global!.slug,\n          limit: 1,\n          pagination: false,\n          req,\n        }))\n      }\n      const [latestVersion] = docs\n\n      // overwrite the latest version if it's set to autosave\n      if (latestVersion && 'autosave' in latestVersion && latestVersion.autosave === true) {\n        createNewVersion = false\n\n        const updateVersionArgs = {\n          id: latestVersion.id,\n          req,\n          versionData: {\n            createdAt: new Date(latestVersion.createdAt).toISOString(),\n            latest: true,\n            parent: id,\n            updatedAt: now,\n            version: {\n              ...versionData,\n            },\n          },\n        }\n\n        if (collection) {\n          result = await payload.db.updateVersion<TData>({\n            ...updateVersionArgs,\n            collection: collection.slug,\n            req,\n          })\n        } else {\n          result = await payload.db.updateGlobalVersion<TData>({\n            ...updateVersionArgs,\n            global: global!.slug,\n            req,\n          })\n        }\n      }\n    }\n\n    if (createNewVersion) {\n      const createVersionArgs = {\n        autosave: Boolean(autosave),\n        collectionSlug: undefined as string | undefined,\n        createdAt: operation === 'restoreVersion' ? versionData.createdAt : now,\n        globalSlug: undefined as string | undefined,\n        parent: collection ? id : undefined,\n        publishedLocale: publishSpecificLocale || undefined,\n        req,\n        select: getQueryDraftsSelect({ select }),\n        updatedAt: now,\n        versionData,\n      }\n\n      if (collection) {\n        createVersionArgs.collectionSlug = collection.slug\n        result = await payload.db.createVersion(createVersionArgs as CreateVersionArgs)\n      }\n\n      if (global) {\n        createVersionArgs.globalSlug = global.slug\n        result = await payload.db.createGlobalVersion(createVersionArgs as CreateGlobalVersionArgs)\n      }\n\n      if (snapshot) {\n        await saveSnapshot<TData>({\n          id,\n          autosave,\n          collection,\n          data: snapshot,\n          global,\n          payload,\n          publishSpecificLocale,\n          req,\n          select,\n        })\n      }\n    }\n  } catch (err) {\n    let errorMessage: string | undefined\n\n    if (collection) {\n      errorMessage = `There was an error while saving a version for the ${typeof collection.labels.singular === 'string' ? collection.labels.singular : collection.slug} with ID ${id}.`\n    }\n    if (global) {\n      errorMessage = `There was an error while saving a version for the global ${typeof global.label === 'string' ? global.label : global.slug}.`\n    }\n    payload.logger.error({ err, msg: errorMessage })\n    return undefined!\n  }\n\n  const max = collection ? collection.versions.maxPerDoc : global!.versions.max\n\n  if (createNewVersion && max > 0) {\n    await enforceMaxVersions({\n      id,\n      collection,\n      global,\n      max,\n      payload,\n      req,\n    })\n  }\n\n  let createdVersion = (result as any).version\n\n  createdVersion = sanitizeInternalFields(createdVersion)\n  createdVersion.id = (result as any).parent\n\n  return createdVersion\n}\n"],"names":["deepCopyObjectSimple","sanitizeInternalFields","getQueryDraftsSelect","enforceMaxVersions","saveSnapshot","saveVersion","id","autosave","collection","docWithLocales","draft","global","operation","payload","publishSpecificLocale","req","select","snapshot","result","createNewVersion","now","Date","toISOString","versionData","_status","timestamps","updatedAt","_id","docs","findVersionArgs","limit","pagination","sort","db","findVersions","slug","where","parent","equals","findGlobalVersions","latestVersion","updateVersionArgs","createdAt","latest","version","updateVersion","updateGlobalVersion","createVersionArgs","Boolean","collectionSlug","undefined","globalSlug","publishedLocale","createVersion","createGlobalVersion","data","err","errorMessage","labels","singular","label","logger","error","msg","max","versions","maxPerDoc","createdVersion"],"mappings":"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"}