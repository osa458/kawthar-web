{"version":3,"sources":["../../../../src/collections/operations/utilities/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { Args } from '../../../fields/hooks/beforeChange/index.js'\nimport type { AccessResult, CollectionSlug, FileToSave, SanitizedConfig } from '../../../index.js'\nimport type {\n  JsonObject,\n  Payload,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../../types/index.js'\nimport type {\n  DataFromCollectionSlug,\n  SanitizedCollectionConfig,\n  SelectFromCollectionSlug,\n  TypeWithID,\n} from '../../config/types.js'\n\nimport { ensureUsernameOrEmail } from '../../../auth/ensureUsernameOrEmail.js'\nimport { generatePasswordSaltHash } from '../../../auth/strategies/local/generatePasswordSaltHash.js'\nimport { combineQueries } from '../../../database/combineQueries.js'\nimport { afterChange } from '../../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../../fields/hooks/beforeValidate/index.js'\nimport { deepCopyObjectSimple, saveVersion } from '../../../index.js'\nimport { deleteAssociatedFiles } from '../../../uploads/deleteAssociatedFiles.js'\nimport { uploadFiles } from '../../../uploads/uploadFiles.js'\nimport { checkDocumentLockStatus } from '../../../utilities/checkDocumentLockStatus.js'\nimport { getLatestCollectionVersion } from '../../../versions/getLatestCollectionVersion.js'\n\nexport type SharedUpdateDocumentArgs<TSlug extends CollectionSlug> = {\n  accessResults: AccessResult\n  autosave: boolean\n  collectionConfig: SanitizedCollectionConfig\n  config: SanitizedConfig\n  data: DeepPartial<DataFromCollectionSlug<TSlug>>\n  depth: number\n  docWithLocales: JsonObject & TypeWithID\n  draftArg: boolean\n  fallbackLocale: string | string[]\n  filesToUpload: FileToSave[]\n  id: number | string\n  locale: string\n  overrideAccess: boolean\n  overrideLock: boolean\n  payload: Payload\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select: SelectType\n  showHiddenFields: boolean\n}\n\n/**\n * This function is used to update a document in the DB and return the result.\n *\n * It runs the following hooks in order:\n * - beforeValidate - Fields\n * - beforeValidate - Collection\n * - beforeChange - Collection\n * - beforeChange - Fields\n * - afterRead - Fields\n * - afterRead - Collection\n * - afterChange - Fields\n * - afterChange - Collection\n */\nexport const updateDocument = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug> = SelectType,\n>({\n  id,\n  accessResults,\n  autosave,\n  collectionConfig,\n  config,\n  data,\n  depth,\n  docWithLocales,\n  draftArg,\n  fallbackLocale,\n  filesToUpload,\n  locale,\n  overrideAccess,\n  overrideLock,\n  payload,\n  populate,\n  publishSpecificLocale,\n  req,\n  select,\n  showHiddenFields,\n}: SharedUpdateDocumentArgs<TSlug>): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  const password = data?.password\n  const isSavingDraft =\n    Boolean(draftArg && collectionConfig.versions.drafts) && data._status !== 'published'\n  const shouldSavePassword = Boolean(\n    password &&\n      collectionConfig.auth &&\n      (!collectionConfig.auth.disableLocalStrategy ||\n        (typeof collectionConfig.auth.disableLocalStrategy === 'object' &&\n          collectionConfig.auth.disableLocalStrategy.enableFields)) &&\n      !isSavingDraft,\n  )\n\n  // /////////////////////////////////////\n  // Handle potentially locked documents\n  // /////////////////////////////////////\n\n  await checkDocumentLockStatus({\n    id,\n    collectionSlug: collectionConfig.slug,\n    lockErrorMessage: `Document with ID ${id} is currently locked by another user and cannot be updated.`,\n    overrideLock,\n    req,\n  })\n\n  const originalDoc = await afterRead({\n    collection: collectionConfig,\n    context: req.context,\n    depth: 0,\n    doc: deepCopyObjectSimple(docWithLocales),\n    draft: draftArg,\n    fallbackLocale: id ? null : fallbackLocale,\n    global: null,\n    locale,\n    overrideAccess: true,\n    req,\n    showHiddenFields: true,\n  })\n\n  const isRestoringDraftFromTrash = Boolean(originalDoc?.deletedAt) && data?._status !== 'published'\n\n  if (collectionConfig.auth) {\n    ensureUsernameOrEmail<TSlug>({\n      authOptions: collectionConfig.auth,\n      collectionSlug: collectionConfig.slug,\n      data,\n      operation: 'update',\n      originalDoc,\n      req,\n    })\n  }\n\n  // /////////////////////////////////////\n  // Delete any associated files\n  // /////////////////////////////////////\n\n  await deleteAssociatedFiles({\n    collectionConfig,\n    config,\n    doc: docWithLocales,\n    files: filesToUpload,\n    overrideDelete: false,\n    req,\n  })\n\n  // /////////////////////////////////////\n  // beforeValidate - Fields\n  // /////////////////////////////////////\n\n  data = await beforeValidate<DeepPartial<DataFromCollectionSlug<TSlug>>>({\n    id,\n    collection: collectionConfig,\n    context: req.context,\n    data,\n    doc: originalDoc,\n    global: null,\n    operation: 'update',\n    overrideAccess,\n    req,\n  })\n\n  // /////////////////////////////////////\n  // beforeValidate - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.beforeValidate?.length) {\n    for (const hook of collectionConfig.hooks.beforeValidate) {\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'update',\n          originalDoc,\n          req,\n        })) || data\n    }\n  }\n\n  // /////////////////////////////////////\n  // Write files to local storage\n  // /////////////////////////////////////\n\n  if (!collectionConfig.upload.disableLocalStorage) {\n    await uploadFiles(payload, filesToUpload, req)\n  }\n\n  // /////////////////////////////////////\n  // beforeChange - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.beforeChange?.length) {\n    for (const hook of collectionConfig.hooks.beforeChange) {\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'update',\n          originalDoc,\n          req,\n        })) || data\n    }\n  }\n\n  // /////////////////////////////////////\n  // beforeChange - Fields\n  // /////////////////////////////////////\n\n  const beforeChangeArgs: Args<DataFromCollectionSlug<TSlug>> = {\n    id,\n    collection: collectionConfig,\n    context: req.context,\n    data: { ...data, id },\n    doc: originalDoc,\n    docWithLocales,\n    global: null,\n    operation: 'update',\n    overrideAccess,\n    req,\n    skipValidation:\n      (isSavingDraft &&\n        collectionConfig.versions.drafts &&\n        !collectionConfig.versions.drafts.validate) ||\n      // Skip validation for trash operations since they're just metadata updates\n      (collectionConfig.trash && (Boolean(data?.deletedAt) || isRestoringDraftFromTrash)),\n  }\n\n  let result: JsonObject = await beforeChange(beforeChangeArgs)\n  let snapshotToSave: JsonObject | undefined\n\n  if (config.localization && collectionConfig.versions) {\n    if (publishSpecificLocale) {\n      snapshotToSave = deepCopyObjectSimple(result)\n\n      // the published data to save to the main document\n      result = await beforeChange({\n        ...beforeChangeArgs,\n        docWithLocales:\n          (await getLatestCollectionVersion({\n            id,\n            config: collectionConfig,\n            payload,\n            published: true,\n            query: {\n              collection: collectionConfig.slug,\n              locale,\n              req,\n              where: combineQueries({ id: { equals: id } }, accessResults),\n            },\n            req,\n          })) || {},\n      })\n    }\n  }\n\n  // /////////////////////////////////////\n  // Handle potential password update\n  // /////////////////////////////////////\n\n  const dataToUpdate: JsonObject = { ...result }\n\n  if (shouldSavePassword && typeof password === 'string') {\n    const { hash, salt } = await generatePasswordSaltHash({\n      collection: collectionConfig,\n      password,\n      req,\n    })\n    dataToUpdate.salt = salt\n    dataToUpdate.hash = hash\n    delete dataToUpdate.password\n    delete data.password\n  }\n\n  // /////////////////////////////////////\n  // Update\n  // /////////////////////////////////////\n\n  if (!isSavingDraft) {\n    // Ensure updatedAt date is always updated\n    dataToUpdate.updatedAt = new Date().toISOString()\n    result = await req.payload.db.updateOne({\n      id,\n      collection: collectionConfig.slug,\n      data: dataToUpdate,\n      locale,\n      req,\n    })\n  }\n\n  // /////////////////////////////////////\n  // Create version\n  // /////////////////////////////////////\n\n  if (collectionConfig.versions) {\n    result = await saveVersion({\n      id,\n      autosave,\n      collection: collectionConfig,\n      docWithLocales: result,\n      draft: isSavingDraft,\n      operation: 'update',\n      payload,\n      publishSpecificLocale,\n      req,\n      snapshot: snapshotToSave,\n    })\n  }\n\n  // /////////////////////////////////////\n  // afterRead - Fields\n  // /////////////////////////////////////\n\n  result = await afterRead({\n    collection: collectionConfig,\n    context: req.context,\n    depth,\n    doc: result,\n    draft: draftArg,\n    fallbackLocale,\n    global: null,\n    locale,\n    overrideAccess,\n    populate,\n    req,\n    select,\n    showHiddenFields,\n  })\n\n  // /////////////////////////////////////\n  // afterRead - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.afterRead?.length) {\n    for (const hook of collectionConfig.hooks.afterRead) {\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }\n  }\n\n  // /////////////////////////////////////\n  // afterChange - Fields\n  // /////////////////////////////////////\n\n  result = await afterChange({\n    collection: collectionConfig,\n    context: req.context,\n    data,\n    doc: result,\n    global: null,\n    operation: 'update',\n    previousDoc: originalDoc,\n    req,\n  })\n\n  // /////////////////////////////////////\n  // afterChange - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.afterChange?.length) {\n    for (const hook of collectionConfig.hooks.afterChange) {\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: result,\n          operation: 'update',\n          previousDoc: originalDoc,\n          req,\n        })) || result\n    }\n  }\n\n  return result as TransformCollectionWithSelect<TSlug, TSelect>\n}\n"],"names":["ensureUsernameOrEmail","generatePasswordSaltHash","combineQueries","afterChange","afterRead","beforeChange","beforeValidate","deepCopyObjectSimple","saveVersion","deleteAssociatedFiles","uploadFiles","checkDocumentLockStatus","getLatestCollectionVersion","updateDocument","id","accessResults","autosave","collectionConfig","config","data","depth","docWithLocales","draftArg","fallbackLocale","filesToUpload","locale","overrideAccess","overrideLock","payload","populate","publishSpecificLocale","req","select","showHiddenFields","password","isSavingDraft","Boolean","versions","drafts","_status","shouldSavePassword","auth","disableLocalStrategy","enableFields","collectionSlug","slug","lockErrorMessage","originalDoc","collection","context","doc","draft","global","isRestoringDraftFromTrash","deletedAt","authOptions","operation","files","overrideDelete","hooks","length","hook","upload","disableLocalStorage","beforeChangeArgs","skipValidation","validate","trash","result","snapshotToSave","localization","published","query","where","equals","dataToUpdate","hash","salt","updatedAt","Date","toISOString","db","updateOne","snapshot","previousDoc"],"mappings":"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"}